// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ScanDomainDao is the data access object for table scan_domain.
type ScanDomainDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns ScanDomainColumns // columns contains all the column names of Table for convenient usage.
}

// ScanDomainColumns defines and stores column names for table scan_domain.
type ScanDomainColumns struct {
	Id       string //
	CusName  string //
	Domain   string //
	Flag     string //
	NsqFlag  string //
	CreateAt string //
}

// scanDomainColumns holds the columns for table scan_domain.
var scanDomainColumns = ScanDomainColumns{
	Id:       "id",
	CusName:  "cus_name",
	Domain:   "domain",
	Flag:     "flag",
	NsqFlag:  "nsq_flag",
	CreateAt: "create_at",
}

// NewScanDomainDao creates and returns a new DAO object for table data access.
func NewScanDomainDao() *ScanDomainDao {
	return &ScanDomainDao{
		group:   "default",
		table:   "scan_domain",
		columns: scanDomainColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ScanDomainDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ScanDomainDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ScanDomainDao) Columns() ScanDomainColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ScanDomainDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ScanDomainDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ScanDomainDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
